@inject IJSRuntime JsRuntime
@implements IDisposable
<ul class="list-group">

    @foreach (var Pet in Pets)
    {
        <li class="list-group-item">@Pet.Name, @Pet.Age</li>
    }

</ul>


@if (StopLoading)
{
    <div>
        <h4>End Of List</h4>
    </div>
}
<div id="list-end" class="mt-5 mb-5 p-5">
    <p></p>
    @if (IsLoading)
    {
        <div class="d-flex justify-content-center">
            <div class="spinner-grow" style="width: 3rem; height: 3rem;" role="status">
                <span class="sr-only">Loading...</span>
            </div>
        </div>
    }
</div>

@code {
    Random rnd = new Random();
    string[] PetNames = { "Rufus", "Bear", "Dakota", "Fido",
        "Vanya", "Samuel", "Koani", "Volodya",
        "Prince", "Yiska", "Maggie", "Penny", "Saya", "Princess",
        "Abby", "Laila", "Sadie", "Olivia",
        "Starlight", "Talla" };

    List<(string Name, int Age)> Pets = new List<(string Name, int Age)>();

    bool IsLoading { get; set; } = false;

    int PageSize = 30;

    int PageNumber = 0;

    bool StopLoading = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadMore();
            await InitJsListenerAsync();
        }
    }

    protected async Task InitJsListenerAsync()
    {
        await JsRuntime.InvokeVoidAsync("ScrollList.Init", "list-end", DotNetObjectReference.Create(this));
    }

    [JSInvokable]
    public async Task LoadMore()
    {
        if (!IsLoading)
        {
            IsLoading = true;

            StateHasChanged();

            await Task.Delay(1000);

            for (int i = 0; i < PageSize; i++)
            {
                Pets.Add((PetNames[rnd.Next(PetNames.Length)], rnd.Next(3, 15)));
            }

            PageNumber++;

            IsLoading = false;

            StateHasChanged();


            //at the end of pages or results stop loading anymore
            if (PageNumber > 4)
            {
                await StopListener();
            }
        }
    }

    public async Task StopListener()
    {
        StopLoading = true;
        IsLoading = false;
        await JsRuntime.InvokeVoidAsync("ScrollList.RemoveListener");
        StateHasChanged();
    }


    public void Dispose()
    {
        JsRuntime.InvokeVoidAsync("ScrollList.RemoveListener");
    }
}
